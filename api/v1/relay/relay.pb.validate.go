// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: relay/relay.proto

package relay

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	flow "github.com/cilium/cilium/api/v1/flow"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = flow.Verdict(0)
)

// define the regex for a UUID once up-front
var _relay_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetBlacklist() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsRequestValidationError{
					field:  fmt.Sprintf("Blacklist[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWhitelist() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsRequestValidationError{
					field:  fmt.Sprintf("Whitelist[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventsRequestValidationError{
				field:  "Since",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetEventsRequestValidationError is the validation error returned by
// GetEventsRequest.Validate if the designated constraints aren't met.
type GetEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventsRequestValidationError) ErrorName() string { return "GetEventsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventsRequestValidationError{}

// Validate checks the field values on GetEventsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Node

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventsResponseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Event.(type) {

	case *GetEventsResponse_Flow:

		if v, ok := interface{}(m.GetFlow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsResponseValidationError{
					field:  "Flow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetEventsResponse_K8SNamespaceAdded:

		if v, ok := interface{}(m.GetK8SNamespaceAdded()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsResponseValidationError{
					field:  "K8SNamespaceAdded",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetEventsResponse_K8SNamespaceDeleted:

		if v, ok := interface{}(m.GetK8SNamespaceDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsResponseValidationError{
					field:  "K8SNamespaceDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetEventsResponse_ServiceAdded:

		if v, ok := interface{}(m.GetServiceAdded()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsResponseValidationError{
					field:  "ServiceAdded",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetEventsResponse_ServiceDeleted:

		if v, ok := interface{}(m.GetServiceDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsResponseValidationError{
					field:  "ServiceDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetEventsResponse_ServiceExists:

		if v, ok := interface{}(m.GetServiceExists()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsResponseValidationError{
					field:  "ServiceExists",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetEventsResponse_ServiceLinkExists:

		if v, ok := interface{}(m.GetServiceLinkExists()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsResponseValidationError{
					field:  "ServiceLinkExists",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEventsResponseValidationError is the validation error returned by
// GetEventsResponse.Validate if the designated constraints aren't met.
type GetEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventsResponseValidationError) ErrorName() string {
	return "GetEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventsResponseValidationError{}

// Validate checks the field values on EventFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventFilter) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFlowFilter() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventFilterValidationError{
					field:  fmt.Sprintf("FlowFilter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetServiceFilter() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventFilterValidationError{
					field:  fmt.Sprintf("ServiceFilter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetServiceLinkFilter() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventFilterValidationError{
					field:  fmt.Sprintf("ServiceLinkFilter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventFilterValidationError is the validation error returned by
// EventFilter.Validate if the designated constraints aren't met.
type EventFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventFilterValidationError) ErrorName() string { return "EventFilterValidationError" }

// Error satisfies the builtin error interface
func (e EventFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventFilterValidationError{}

// Validate checks the field values on K8SNamespace with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *K8SNamespace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K8SNamespaceValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// K8SNamespaceValidationError is the validation error returned by
// K8SNamespace.Validate if the designated constraints aren't met.
type K8SNamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SNamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SNamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SNamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SNamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SNamespaceValidationError) ErrorName() string { return "K8SNamespaceValidationError" }

// Error satisfies the builtin error interface
func (e K8SNamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SNamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SNamespaceValidationError{}

// Validate checks the field values on K8SNamespaceAdded with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *K8SNamespaceAdded) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K8SNamespaceAddedValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// K8SNamespaceAddedValidationError is the validation error returned by
// K8SNamespaceAdded.Validate if the designated constraints aren't met.
type K8SNamespaceAddedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SNamespaceAddedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SNamespaceAddedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SNamespaceAddedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SNamespaceAddedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SNamespaceAddedValidationError) ErrorName() string {
	return "K8SNamespaceAddedValidationError"
}

// Error satisfies the builtin error interface
func (e K8SNamespaceAddedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SNamespaceAdded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SNamespaceAddedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SNamespaceAddedValidationError{}

// Validate checks the field values on K8SNamespaceDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *K8SNamespaceDeleted) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K8SNamespaceDeletedValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// K8SNamespaceDeletedValidationError is the validation error returned by
// K8SNamespaceDeleted.Validate if the designated constraints aren't met.
type K8SNamespaceDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SNamespaceDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SNamespaceDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SNamespaceDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SNamespaceDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SNamespaceDeletedValidationError) ErrorName() string {
	return "K8SNamespaceDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e K8SNamespaceDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SNamespaceDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SNamespaceDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SNamespaceDeletedValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for EgressPolicyEnforced

	// no validation rules for IngressPolicyEnforced

	// no validation rules for VisibilityPolicyStatus

	if v, ok := interface{}(m.GetCreationTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "CreationTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on ServiceAdded with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceAdded) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceAddedValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceAddedValidationError is the validation error returned by
// ServiceAdded.Validate if the designated constraints aren't met.
type ServiceAddedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceAddedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceAddedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceAddedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceAddedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceAddedValidationError) ErrorName() string { return "ServiceAddedValidationError" }

// Error satisfies the builtin error interface
func (e ServiceAddedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceAdded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceAddedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceAddedValidationError{}

// Validate checks the field values on ServiceDeleted with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceDeleted) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceDeletedValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceDeletedValidationError is the validation error returned by
// ServiceDeleted.Validate if the designated constraints aren't met.
type ServiceDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDeletedValidationError) ErrorName() string { return "ServiceDeletedValidationError" }

// Error satisfies the builtin error interface
func (e ServiceDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDeletedValidationError{}

// Validate checks the field values on ServiceExists with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceExists) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceExistsValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceExistsValidationError is the validation error returned by
// ServiceExists.Validate if the designated constraints aren't met.
type ServiceExistsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceExistsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceExistsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceExistsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceExistsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceExistsValidationError) ErrorName() string { return "ServiceExistsValidationError" }

// Error satisfies the builtin error interface
func (e ServiceExistsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceExists.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceExistsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceExistsValidationError{}

// Validate checks the field values on ServiceFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceFilter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	return nil
}

// ServiceFilterValidationError is the validation error returned by
// ServiceFilter.Validate if the designated constraints aren't met.
type ServiceFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceFilterValidationError) ErrorName() string { return "ServiceFilterValidationError" }

// Error satisfies the builtin error interface
func (e ServiceFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceFilterValidationError{}

// Validate checks the field values on ServiceLink with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceLink) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for SourceId

	// no validation rules for DestinationId

	// no validation rules for DestinationPort

	// no validation rules for IpProtocol

	// no validation rules for Verdict

	return nil
}

// ServiceLinkValidationError is the validation error returned by
// ServiceLink.Validate if the designated constraints aren't met.
type ServiceLinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceLinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceLinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceLinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceLinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceLinkValidationError) ErrorName() string { return "ServiceLinkValidationError" }

// Error satisfies the builtin error interface
func (e ServiceLinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceLinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceLinkValidationError{}

// Validate checks the field values on ServiceLinkExists with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ServiceLinkExists) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetServiceLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceLinkExistsValidationError{
				field:  "ServiceLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceLinkExistsValidationError is the validation error returned by
// ServiceLinkExists.Validate if the designated constraints aren't met.
type ServiceLinkExistsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceLinkExistsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceLinkExistsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceLinkExistsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceLinkExistsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceLinkExistsValidationError) ErrorName() string {
	return "ServiceLinkExistsValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceLinkExistsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceLinkExists.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceLinkExistsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceLinkExistsValidationError{}

// Validate checks the field values on ServiceLinkFilter with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ServiceLinkFilter) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSource() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceLinkFilterValidationError{
					field:  fmt.Sprintf("Source[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDestination() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceLinkFilterValidationError{
					field:  fmt.Sprintf("Destination[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ServiceLinkFilterValidationError is the validation error returned by
// ServiceLinkFilter.Validate if the designated constraints aren't met.
type ServiceLinkFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceLinkFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceLinkFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceLinkFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceLinkFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceLinkFilterValidationError) ErrorName() string {
	return "ServiceLinkFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceLinkFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceLinkFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceLinkFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceLinkFilterValidationError{}
